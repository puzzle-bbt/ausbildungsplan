# This is an automaticly generated file. Don't edit this file manually
---
topics:
- title: Applikationsentwicklung
  description: Verstehen und Entwickeln von Server- und Clientseitiger Software.
  year_calendar_weeks:
    2.1.1: 1 33-40
    2.1.2: 2 40-41
    2.1.3: 3 41-42
    2.2.1: 1 1-15
    2.3.1: 1 33-40
    2.3.2: 1 41-49
    2.3.3: 2 5-6
    2.3.4: 3 6-7
    2.3.5: 4 7-8
    2.4.1: 1 47-50
    2.4.2: 2 50-51
    2.4.3: 3 51-52
    2.5.1: 1 40-45
    2.5.2: 2 45-46
    2.5.3: 3 46-47
    2.6.1: 1 45-5
    2.6.2: 2 5-6
    2.6.3: 3 6-7
    2.6.4: 4 8-9
  id: '2'
- title: Tools / Dienste
  description: Verwendung von Tools und Dienste.
  year_calendar_weeks:
    3.1.1: 1 40-50
    3.1.2: 1 33-40
    3.1.3: 1 41-50
    3.1.4: 1 51-52
    3.2.1: 1 6-15
    3.2.2: 1 15-22
    3.2.3: 1 23-30
    3.3.1: 1 40-48
    3.3.2: 1 49-50
    3.3.3: 1 51-52
    3.4.1: 1 10-20
    3.4.2: 1 21-30
  id: '3'
- title: Team- / Selbstorganisation
  description: Organisation rund um die komplexe Welt der Applikationsentwicklung.
  year_calendar_weeks:
    4.1.1: 1 33-40
    4.1.2: 2 33-40
    4.2.1: 1 33-40
  id: '4'
- title: UI / Web
  description: Verstehen und Entwickeln von Webseiten
  year_calendar_weeks:
    1.1.1: 1 33-35
    1.1.2: 1 37-39
    1.1.3: 1 41-43
    1.1.4: 1 45-47
    1.2.1: 1 33-35
    1.2.2: 1 37-39
    1.2.3: 1 41-43
    1.3.1: 1 33-35
    1.3.2: 1 37-39
  id: '1'
competencies:
- title: Multi-Pape Applikation
  description: Verstehen und Umsetzen einer Multi-Page Applikation
  id: '2.2'
- title: Single-Page-Applikation
  description: Verstehen und Umsetzen einer Single-Page-Applikation
  id: '2.3'
- title: API
  description: Definieren und Verwenden von Schnittstellen
  id: '2.4'
- title: Programmierung
  description: Aufbau und Gestaltung einer statischen Webseite
  id: '2.1'
- title: Konzeption
  description: Erstellen und dokumentieren einer Software Architektur.
  id: '2.6'
- title: Build-Tools + Dependencies
  description: Verwalten der Abhängigkeiten, bauen und deployen von einer Webapplikation
  id: '2.5'
- title: Systems
  description: Betriebssystem Anwendung, Installation und Konfiguration
  id: '3.2'
- title: DevOps
  description: Zusammenspiel von Entwicklung und Betrieb
  id: '3.3'
- title: Office Welt
  description: Toollandschaft um sich das Leben einfacher zu machen
  id: '3.4'
- title: Development
  description: Tools benötigt für die täglichen Entwicklungstasks
  id: '3.1'
- title: Selbstorganisation/Selbstkompetenz
  description: Persönliche Organisation, Kommunikation, Lernstrategien
  id: '4.2'
- title: Team- / Projektorganisation
  description: Methoden, Werkzeuge und Wissen rund um die Organisation im Team und
    in Projekten.
  id: '4.1'
- title: JavaScript in Webseiten
  description: Einsatz von JavaScript in einer statischen Webseite.
  id: '1.2'
- title: User Experience (UX)
  description: Design, Interaktion und Gebrauchstauglichkeit einer Webseite verbessern.
  id: '1.3'
- title: Statische Webseite
  description: Aufbau und Gestaltung einer statischen Webseite mit HTML und CSS
  id: '1.1'
competency_levels:
- goals:
  - Funktionsweise einer Multi-Pape Applikation verstehen.
  - Eine einfache Multi-Pape Applikation ohne DB anwenden und erweitern können.
  instruments:
  - SpringBoot oder Ruby on Rails zum Erstellen einer dynamische Webseite.
  - "(Spring Boot Baeldung)[https://www.baeldung.com/spring-boot]"
  - "(Ruby on Rails)[https://rubyonrails.org/]"
  id: 2.2.1
- goals:
  - Single-Page-Webanwendung mit einem Framework und statischem Backend erstellen
  instruments:
  - "[Angular](https://angular.io)"
  - "[Ember](https://emberjs.com)"
  - "[React](https://reactjs.org)"
  id: 2.3.2
- goals:
  - Kann Single Page Applications erstellen
  - Kann CRUD Operationen visualisieren
  - Versteht SPAs im Zusammenspiel mit Backend und Datenbanken
  instruments:
  - "(Funktionsweise SPA)[https://www.bloomreach.com/en/blog/2018/07/what-is-a-single-page-application.html]"
  - "(Angular)[https://angular.io/tutorial]"
  - "(React)[https://reactjs.org/tutorial/tutorial.html]"
  id: 2.3.3
- goals:
  - Kann SPA bauen und deployen
  - Versteht die Verwendung von Webservern
  - Kann Frontend mit Backend Verknüpfen
  instruments:
  - "(Openshift)[https://learn.openshift.com]"
  - "(Angular)[https://angular.io/tutorial]"
  - "(React)[https://reactjs.org/tutorial/tutorial.html]"
  id: 2.3.4
- goals:
  - Funktionsweise einer Single-Page-Webanwendung verstehen
  - Erste Beispielstutorials durchgeführt (ohne Framework + Backend)
  instruments:
  - Hilfsmittel sind noch zu definieren.
  id: 2.3.1
- goals:
  - Kann Single-Page Applications sicher machen
  - Versteht und kann Json-Web-Tokens (JWT) verwenden
  - Versteht das Konzept eines Single-Sign-On Serivces
  instruments:
  - "(jwt.io)[https://jwt.io/]"
  - "(SSO)[https://medium.com/@just_insane/keycloak-sso-part-1-what-is-single-sign-on-7229743c289b]"
  - "(Keycloak)[https://www.keycloak.org/documentation]"
  id: 2.3.5
- goals:
  - Microservice Architektur verstehen
  - Backend Kommunkationsarten verstehen (HTTP / gRPC / Event Driven)
  - Deployment und Containerisierung von Applikationen
  instruments:
  - "(Deployment auf Openshift)[https://learn.openshift.com]"
  - "(Microservices)[https://microservices.io/]"
  id: 2.4.2
- goals:
  - Event Driven Architecture verstehen
  - Messaging Konzept verstehen
  instruments:
  - "(Smallrye Messaging Concecpts)[https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/2/index.html]"
  id: 2.4.3
- goals:
  - Backend Projektgerüst erstellen
  - Funktion einer API verstehen
  - Simple Applikation selber bauen
  - CRUD Operationen als Endpunkte anbieten und abbilden
  instruments:
  - "(API Guidelines)[https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9]"
  - "(RESTful Guidelines)[https://restfulapi.net/]"
  id: 2.4.1
- goals:
  - Kennenlernen der gängigsten Algorithmen
  - Entwerfen eigener Algorithmen
  - Lesen und Verstehen von fremdem Code
  instruments:
  - "(Bekannte Algorithmen)[https://medium.com/@codingfreak/top-algorithms-data-structures-concepts-every-computer-science-student-should-know-e0549c67b4ac]"
  id: 2.1.2
- goals:
  - Versteht wie man Programmabläufe parallelisiert
  - Versteht Konzepte und Probleme von Concurrency
  - Kann basische Algorithmen durch Parallelisierung verbessern
  - Kennt Probleme der Concurrency und mögliche Lösungen
  instruments:
  - "(Bekannte Algorithmen)[https://medium.com/@codingfreak/top-algorithms-data-structures-concepts-every-computer-science-student-should-know-e0549c67b4ac]"
  - "(Oracle Concurrency)[https://docs.oracle.com/javase/tutorial/essential/concurrency/]"
  id: 2.1.3
- goals:
  - Einstieg in die Programmierung
  - Kennenlernen von Variablen, Typen, Verzweigungen und Schleifen
  instruments:
  - Hilfsmittel sind noch zu definieren.
  id: 2.1.1
- goals:
  - Kennt Domain Driven Design
  - Kennt die Clean Architecture Ansätze
  - Kann Applikationen nach ihren Grundsätzen modellieren
  instruments:
  - "(Blog DDD / CA)[https://khalilstemmler.com/articles/software-design-architecture/domain-driven-design-vs-clean-architecture/]"
  id: 2.6.2
- goals:
  - Applikationen als Microservices modellieren
  - Konzeption und Modellierung der Kommunikation
  instruments:
  - Hilfsmittel sind noch zu definieren.
  id: 2.6.3
- goals:
  - Kann Prozesse in bekannten Architekturen modellieren
  - Kennt und versteht Transaktionalität
  - Kann Fehler und Fehlerhandling modellieren und abbilden
  instruments:
  - Hilfsmittel sind noch zu definieren.
  id: 2.6.4
- goals:
  - Zusammenspiel verschiedener Applikationen verstehen
  - Moddelierung von kleinen Applikationen
  instruments:
  - Hilfsmittel sind noch zu definieren.
  id: 2.6.1
- goals:
  - Versteht die Kernkonzepte von DevOps
  - Versteht die Funktionsweise von Build Pipelines
  - Kann eigenes Projekt in Multibranch Pipeline bauen
  instruments:
  - "(Jenkins)[https://jenkins.io/doc/tutorials/]"
  - "(Jenkins Katacode)[https://www.katacoda.com/courses/cicd/jenkins]"
  - "(DevOps)[https://www.guru99.com/devops-tutorial.html]"
  id: 2.5.2
- goals:
  - Versteht wie Container funktionieren und den Unterschied zu virtuellen Maschinen
  - Versteht den Nutzen einer Orchestrierungsplattform
  - Kann eigene Testprojekte auf Kubernetes / Openshift deployen
  instruments:
  - "(Container vs VM)[https://www.docker.com/resources/what-container]"
  - "(Openshift Documentation)[https://docs.openshift.com/]"
  - "(Kubernetes Documentation)[https://kubernetes.io/docs/home/]"
  id: 2.5.3
- goals:
  - Versteht denn Sinn und Zweck von BuildTools
  - Kennt die gängigsten Dependencymanager und Buildtools
  instruments:
  - "(Maven)[https://maven.apache.org/]"
  - "(Gradle)[https://gradle.org/]"
  id: 2.5.1
- goals:
  - Kennenlernen von Bash als Skriptsprache
  - Kleine Scripts für den täglichen Betrieb schreiben
  - Kennenlerenen von SSH
  - Kann per SSH auf andere Systeme Verbindungen herstellen
  instruments:
  - "[Bash Dokumentation](https://www.gnu.org/software/bash/manual/bash.html)"
  - "[Tutorial Bash Skripts](https://wiki.ubuntuusers.de/Shell/Bash-Skripting-Guide_f%C3%BCr_Anf%C3%A4nger/)"
  - "[SSH Digital Ocean](https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys)"
  id: 3.2.2
- goals:
  - Verstehen und Kennenlerenen von Containern
  - Kennt Unterschiede zwischen virtuellen Maschinen und Containern
  - Kann eine simple Applikation containerisieren
  instruments:
  - "[Container Basics](https://www.docker.com/resources/what-container)"
  - "[Docker Curriculum](https://docker-curriculum.com/"
  - "[Dockerfile Best Practices](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/)"
  id: 3.2.3
- goals:
  - Kennen der wichtigsten Hardwarekomponenten eines PCs und dessen Aufgaben
  - Selbständig ein Betriebssystem auf einem Computer und in einer Virtual Machine
    installieren
  - Virtual Machines managen
  - Software/Pakete installieren, entfernen, konfigurieren
  - Benutzerverwaltung und Berechtigungen kennen und anwenden
  instruments:
  - 'Lern-Session: Virtual Machines'
  - Praktikum Systems Engineering
  - "[ÜK 305 - Betriebssysteme: ](https://cf.ict-berufsbildung.ch/modules.php?name=Mbk&a=20101&cmodnr=305)"
  id: 3.2.1
- goals:
  - Sinn und Zweck von Buildpipelines und Buildserver verstehen
  - Kann Pipelines für Build und Tests von eigenen Projekten implementieren
  - Kann Deployments mit Pipelines anstossen / kontrollieren
  instruments:
  - "[Jenkins Tutorial](https://www.jenkins.io/doc/tutorials/)"
  id: 3.3.2
- goals:
  - Versteht die Grundkonzepte von Container Orchestration
  - Kann eine simple Applikation auf Kubernetes / OpenShift deployen
  instruments:
  - "[Kubernetes Tutorial](https://kubernetes.io/docs/tutorials/)"
  - "[Learn OpenShift](https://learn.openshift.com/)"
  id: 3.3.3
- goals:
  - Verstehen der Grundprinzipien von DevOps
  - Sinn und Zweck von Buildpipelines und Buildserver verstehen
  - Verstehen was Orchestrierungsplattformen machen
  instruments:
  - "[What is DevOps](https://resources.collab.net/devops-101/what-is-devops)"
  - "[What is a build server](https://deviq.com/build-server/)"
  - "[What is Container Orchestration](https://blog.newrelic.com/engineering/container-orchestration-explained/)"
  id: 3.3.1
- goals:
  - Kennt die Puzzle Toollandschaft für Projekten zu arbeiten
  - Kennt Prinzipien von Kanban / Scrum
  - Kann seine tägliche Arbeit mit Hilfe von Tools vereinfachen
  - Kennt den Umgang mit OpenProject
  - Kann Texte mit Markdown gestalten und gliedern
  instruments:
  - "[LibreOffice Guide](https://documentation.libreoffice.org/en/english-documentation/getting-started-guide/)"
  - "[Kanban](https://www.atlassian.com/agile/kanban)"
  - "[Scrum](https://www.scrum.org/resources/what-is-scrum)"
  - "[Wekan](https://wekan.puzzle.ch)"
  - "[Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)"
  - "[CodiMD](https://codimd.puzzle.ch)"
  - "[OpenProject](https://project.puzzle.ch/)"
  id: 3.4.2
- goals:
  - Kennt die LibreOffice Palette und kennt die wichtigsten Grunfunktionalitäten
  - Kann Dokumente mit LibreOffice Writer schreiben
  - Kann Präsentationen mit LibreOffice Impress erstellen
  - Kann Tabellenkalkulationen mit LibreOffice Calc machen
  instruments:
  - "[LibreOffice Guide](https://documentation.libreoffice.org/en/english-documentation/getting-started-guide/)"
  id: 3.4.1
- goals:
  - Entwicklungsumgebung einrichten
  - Kennenlernen gängigster Entwicklungsumgebungen
  - Erste Files mit VIM manipuliert
  - Projekt in Entwicklungsumgebung importiert
  instruments:
  - "[Vim Dokumentation](https://vim.org/)"
  - "[Vim Tutorial](https://www.openvim.com/)"
  - "[IntellJ](https://www.jetbrains.com/idea/)"
  - "[Visual Studio Code](https://code.visualstudio.com/)"
  id: 3.1.2
- goals:
  - HTTP / HTTPS kennenlernen
  - Verstehen der Grundlagen des Protokolls
  - Erste Requests per HTTP über curl abgesetzt
  instruments:
  - "[HTTP Tutorialpoint](https://www.tutorialspoint.com/http/index.htm)"
  - "[curl Dokumentation](https://curl.haxx.se/docs/manpage.html)"
  id: 3.1.3
- goals:
  - Sinn und Verwendung von Datenbanken kennenlernen
  - Kennt mehrere Datenbanktypen und Datenbank-Implementationen
  - Kann lokal eine Datenbank starten und diese verwenden
  - Kann mit Hilfe von Queries Daten aus einer SQL-Datenbank abfragen
  instruments:
  - "[Datenbank Basics](https://www.tutorialspoint.com/Introduction-to-Databases)"
  - "[SQL Tutorialpoint](https://www.w3schools.com/sql/default.asp)"
  id: 3.1.4
- goals:
  - Git kennenlernen
  - Sinn und Zweck von Git als Versionisierungstool verstehen
  - Erstes Git Repo erstellt und versionisiert haben
  instruments:
  - "[Git Dokumentation](https://git-scm.com/)"
  - "[Pro Git Buch](https://git-scm.com/book/en/v2)"
  id: 3.1.1
- goals:
  - 'Kalender: Termineinladungen bestätigen/absagen, Termine erstellen/finden'
  - 'Kalender: Abwesenheiten erfassen'
  - 'Notizen: Bei allen Gesprächen/Meetings Notizen machen'
  - eine Methode/Werkzeug kennen und anwenden für die Verwaltung der eigenen Aufgaben
  instruments:
  - Learning by Doing
  id: 4.2.1
- goals:
  - 'Projektmanagement: Meetings kennen und dessen Zweck verstehen'
  - 'Projektmanagement: Rollen und Aufgabenverteilung'
  instruments:
  - Lern-Session
  - Lernenden-Workshops
  - 'Learning by Doing: Features/Aufgaben innerhalb der Projektorganisation umsetzen'
  id: 4.1.2
- goals:
  - Sich seiner Rolle im Team bewusst sein
  - Aufgaben im Team identifizieren und übernehmen
  - Verantwortung für Aufgaben übernehmen
  - 'Kommunikation: '
  instruments:
  - Lern-Session
  - 'Learning by Doing: Ämtli, Organisation von Events'
  id: 4.1.1
- goals:
  - Mit jQuery HTML-Tags in den DOM hinzufügen und bestehende HTML-Tags manipulieren.
  instruments:
  - "[https://jquery.com/](https://jquery.com/)"
  id: 1.2.2
- goals:
  - Daten asynchron nachladen.
  instruments:
  - Todo
  id: 1.2.3
- goals:
  - 'Was ist JavaScript: Entstehung, Versionen, Funktionsweise, Sandbox-Prinzip'
  - JavaScript direkt in der HTML-Seite.
  - JavaScript in eine separate Datei auslagern.
  - Mit JavaScript einfache click-Handler umsetzen.
  - Ein Formular validieren und absenden.
  - 'Entwickler-Tools: Debuggen im Browser.'
  instruments:
  - https://www.ecma-international.org/ecma-262
  - https://developer.mozilla.org/de/docs/Web/JavaScript
  - https://wiki.selfhtml.org/wiki/JavaScript
  id: 1.2.1
- goals:
  - Responsive First Ansatz
  instruments:
  - "[https://getbootstrap.com/](https://getbootstrap.com/)"
  id: 1.3.2
- goals:
  - Was bedeutet User Experience (UX)?
  - Design und Layout einer Webseite.
  - Formulare
  instruments:
  - Hilfsmittel sind noch zu definieren.
  id: 1.3.1
- goals:
  - Responsive Webseite verstehen und umsetzen können.
  - Mobile First Ansatz
  - Kennt die gängigsten Medienformate für das Web und wie man diese Einbindet.
  - Kennt die wichtigsten rechtlichen Rahmenbedingungen (Copyrights, illegale Downloads,
    Lizenzierungsbedingungen) bei der Verwendung fremder Inhalte.
  instruments:
  - "[ÜK 101 - Webauftritt: ](https://cf.ict-berufsbildung.ch/modules.php?name=Mbk&a=20101&cmodnr=101)"
  - "[https://www.w3schools.com/html/html_responsive.asp](https://www.w3schools.com/html/html_responsive.asp)"
  id: 1.1.2
- goals:
  - Verwendung von HTML und CSS Frameworks
  - 'Grid System verstehen: Bootstrap, Flexbox, SS Grid Layout'
  instruments:
  - "[Bootstrap](https://getbootstrap.com/)"
  - "[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
  - "[CSS Grid Layout](https://css-tricks.com/snippets/css/complete-guide-grid/)"
  - "[Bootstrap Alternatives: The top 36 options in 2020](https://classpert.com/blog/top-bootstrap-alternatives)"
  - "[Foundation](https://get.foundation/)"
  - "[Bulma](https://bulma.io/)"
  - "[Tailwind CSS](https://tailwindcss.com/)"
  - "[HTML5 ★ Boilerplate](https://html5boilerplate.com/)"
  id: 1.1.3
- goals:
  - CSS-Preprocessor wie Less, Sass, Scss anwenden können.
  instruments:
  - "[http://lesscss.org/](http://lesscss.org/)"
  - "[https://sass-lang.com/guide](https://sass-lang.com/guide)"
  - "[https://sass-lang.com/documentation/syntax](https://sass-lang.com/documentation/syntax)"
  id: 1.1.4
- goals:
  - 'HTML: Aufbau einer Webseite verstehen: Tags + Attribute.'
  - 'HTML: Die wichtigsten HTML-Tags und Attribute kennen.'
  - Trennung von Inhalt und Style
  - 'CSS: Funktionsweise von Selektoren und Formatierung verstehen.'
  - 'CSS: Die wichtigsten Styles anwenden können.'
  - Trennung zwischen Inhalt und Style verstehen.
  - Einfaches Layout mit HTML + CSS umsetzen können.
  instruments:
  - "[https://www.w3schools.com/html](https://www.w3schools.com/html)"
  - "[https://www.w3schools.com/css](https://www.w3schools.com/css)"
  - "[https://www.codecademy.com/catalog/language/html-css](https://www.codecademy.com/catalog/language/html-css)"
  id: 1.1.1
conf:
- semester:
  - start_at_week_nr: 33
    finish_at_week_nr: 4
  - start_at_week_nr: 5
    finish_at_week_nr: 32
